{
  "hash": "45ac1279c4c9cbf6bf9c86edc31c3bde",
  "result": {
    "markdown": "---\ntitle: \"Implementing Bayesian Models in R for Plant Disease Epidemiology with R\"\ndate: '2022-12-09'\ncategories: [R]\n---\n\n\n## 1. บทนำ\n\nการวิเคราะห์ข้อมูลทางระบาดวิทยาโรคพืชในปัจจุบันต้องเผชิญกับความท้าทายหลายประการ ทั้งความไม่แน่นอนของการระบาด ความซับซ้อนของปัจจัยที่เกี่ยวข้อง และข้อจำกัดของขนาดตัวอย่าง การวิเคราะห์แบบ Bayesian จึงเป็นทางเลือกที่น่าสนใจ เนื่องจากมีข้อได้เปรียบหลายประการเมื่อเทียบกับวิธี Frequentist ดั้งเดิม:\n\n1.  สามารถผสมผสานความรู้เดิม (Prior Knowledge) จากผู้เชี่ยวชาญหรือการศึกษาก่อนหน้าเข้ากับข้อมูลปัจจุบัน\n2.  ให้การประมาณค่าความไม่แน่นอนที่สมจริงมากกว่า ผ่าน Credible Intervals\n3.  รองรับการวิเคราะห์ข้อมูลที่มีขนาดตัวอย่างน้อยได้ดี\n4.  เหมาะสำหรับการสร้างแบบจำลองที่ซับซ้อนและมีลำดับชั้น\n\nใน R มีแพ็กเกจที่ช่วยให้การวิเคราะห์แบบ Bayesian ทำได้สะดวกขึ้น โดยเฉพาะ {brms} และ {rstanarm} ซึ่งช่วยลดความซับซ้อนในการเขียนโค้ด Stan\n\n## 2. การเตรียมความพร้อม\n\n### 2.1 การติดตั้งและโหลดแพ็กเกจ\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ติดตั้งแพ็กเกจที่จำเป็น\n# install.packages(c(\"brms\", \"rstanarm\", \"tidyverse\", \"bayesplot\"))\n\n# โหลดแพ็กเกจ\nlibrary(brms)\nlibrary(rstanarm)\nlibrary(tidyverse)\nlibrary(bayesplot)\n```\n:::\n\n\n### 2.2 การเตรียมข้อมูล\n\nการเตรียมข้อมูลที่ดีเป็นพื้นฐานสำคัญของการวิเคราะห์ ควรทำตามขั้นตอนต่อไปนี้:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# สร้างข้อมูลจำลองสำหรับการระบาดของโรคไหม้ในข้าว\nset.seed(123) # กำหนดเพื่อให้ผลลัพธ์คงที่\n\n# กำหนดจำนวนตัวอย่าง\nn <- 200\n\n# สร้างตัวแปรสภาพแวดล้อม\ntemperature <- rnorm(n, mean = 28, sd = 3)  # อุณหภูมิ (°C)\nhumidity <- rnorm(n, mean = 85, sd = 8)     # ความชื้นสัมพัทธ์ (%)\nrainfall <- rgamma(n, shape = 2, scale = 10) # ปริมาณน้ำฝน (มม./วัน)\nwind_speed <- rnorm(n, mean = 5, sd = 2)    # ความเร็วลม (กม./ชม.)\n\n# สร้างตัวแปรการจัดการ\nvariety <- sample(c(\"สุพรรณบุรี 1\", \"ปทุมธานี 1\", \"กข49\", \"กข61\"), n, replace = TRUE)\nplanting_density <- rnorm(n, mean = 25, sd = 3) # ระยะปลูก (ซม.)\nnitrogen_rate <- rnorm(n, mean = 100, sd = 20)  # อัตราปุ๋ยไนโตรเจน (กก./ไร่)\n\n# สร้างความสัมพันธ์ที่ซับซ้อนสำหรับความรุนแรงของโรค\n# โดยคำนึงถึงปัจจัยหลักที่มีผลต่อการระบาด\nlogit_severity <- -2 + \n                  0.3 * scale(temperature) +\n                  0.4 * scale(humidity) +\n                  0.2 * scale(rainfall) +\n                  0.1 * scale(wind_speed) +\n                  rnorm(n, 0, 0.5)  # ความแปรปรวนที่ไม่สามารถอธิบายได้\n\n# แปลงเป็นเปอร์เซ็นต์ความรุนแรงของโรค\ndisease_severity <- plogis(logit_severity) * 100\n\n# สร้าง data frame\nrice_blast_data <- data.frame(\n  date = seq(as.Date(\"2024-01-01\"), by = \"day\", length.out = n),\n  plot_id = 1:n,\n  temperature = temperature,\n  humidity = humidity,\n  rainfall = rainfall,\n  wind_speed = wind_speed,\n  variety = variety,\n  planting_density = planting_density,\n  nitrogen_rate = nitrogen_rate,\n  disease_severity = disease_severity\n)\n\n# เพิ่ม missing values เพื่อให้เหมือนข้อมูลจริง\nset.seed(456)\nmissing_indices <- sample(1:n, size = n * 0.1)  # 10% missing values\nrice_blast_data$disease_severity[missing_indices] <- NA\n\n# เพิ่มคอลัมน์สำหรับระยะการเจริญเติบโต\nrice_blast_data$growth_stage <- cut(\n  as.numeric(rice_blast_data$date - min(rice_blast_data$date)),\n  breaks = c(-Inf, 30, 60, 90, Inf),\n  labels = c(\"Vegetative\", \"Tillering\", \"Booting\", \"Heading\")\n)\n\n# แสดงตัวอย่างข้อมูล\nhead(rice_blast_data)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|date       | plot_id| temperature|  humidity|  rainfall| wind_speed|variety   | planting_density| nitrogen_rate| disease_severity|growth_stage |\n|:----------|-------:|-----------:|---------:|---------:|----------:|:---------|----------------:|-------------:|----------------:|:------------|\n|2024-01-01 |       1|    26.31857| 102.59048| 14.112653|   5.081870|กข49      |         26.97498|     116.69064|        29.502238|Vegetative   |\n|2024-01-02 |       2|    27.30947|  95.49930|  1.500635|   5.573071|สุพรรณบุรี 1 |         22.19361|      86.14552|        12.415558|Vegetative   |\n|2024-01-03 |       3|    32.67612|  82.87884| 14.648844|   4.991773|ปทุมธานี 1  |         27.14270|      68.56425|        19.836898|Vegetative   |\n|2024-01-04 |       4|    28.21153|  89.34555| 20.777725|   6.373626|กข49      |         28.96207|     119.35015|        19.581910|Vegetative   |\n|2024-01-05 |       5|    28.38786|  81.68528| 21.901982|   4.710641|ปทุมธานี 1  |         22.47249|      68.11050|         8.171854|Vegetative   |\n|2024-01-06 |       6|    33.14520|  81.19002| 33.222297|   3.775844|สุพรรณบุรี 1 |         24.84162|     104.04905|        13.119328|Vegetative   |\n\n</div>\n:::\n\n```{.r .cell-code}\n# สรุปข้อมูลเบื้องต้น\nsummary(rice_blast_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      date               plot_id        temperature       humidity     \n Min.   :2024-01-01   Min.   :  1.00   Min.   :21.07   Min.   : 65.27  \n 1st Qu.:2024-02-19   1st Qu.: 50.75   1st Qu.:26.12   1st Qu.: 80.27  \n Median :2024-04-09   Median :100.50   Median :27.82   Median : 85.18  \n Mean   :2024-04-09   Mean   :100.50   Mean   :27.97   Mean   : 85.34  \n 3rd Qu.:2024-05-29   3rd Qu.:150.25   3rd Qu.:29.71   3rd Qu.: 90.72  \n Max.   :2024-07-18   Max.   :200.00   Max.   :37.72   Max.   :105.57  \n                                                                       \n    rainfall        wind_speed        variety          planting_density\n Min.   : 1.501   Min.   :-0.2077   Length:200         Min.   :17.27   \n 1st Qu.:10.724   1st Qu.: 3.7564   Class :character   1st Qu.:22.76   \n Median :17.027   Median : 4.9846   Mode  :character   Median :24.96   \n Mean   :18.861   Mean   : 4.9995                      Mean   :24.96   \n 3rd Qu.:25.526   3rd Qu.: 6.4826                      3rd Qu.:27.14   \n Max.   :69.841   Max.   :11.6087                      Max.   :33.10   \n                                                                       \n nitrogen_rate    disease_severity     growth_stage\n Min.   : 52.97   Min.   : 2.305   Vegetative: 31  \n 1st Qu.: 86.61   1st Qu.: 7.691   Tillering : 30  \n Median : 99.07   Median :11.653   Booting   : 30  \n Mean   :100.23   Mean   :13.994   Heading   :109  \n 3rd Qu.:115.08   3rd Qu.:18.573                   \n Max.   :153.33   Max.   :62.341                   \n                  NA's   :20                       \n```\n:::\n\n```{.r .cell-code}\n# ตรวจสอบความสัมพันธ์ระหว่างตัวแปร\ncor(rice_blast_data[, c(\"temperature\", \"humidity\", \"rainfall\", \n                        \"wind_speed\", \"disease_severity\")], \n    use = \"complete.obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 temperature    humidity   rainfall  wind_speed\ntemperature       1.00000000 -0.01555054 0.12355449  0.03511394\nhumidity         -0.01555054  1.00000000 0.05300847 -0.01096358\nrainfall          0.12355449  0.05300847 1.00000000  0.04084439\nwind_speed        0.03511394 -0.01096358 0.04084439  1.00000000\ndisease_severity  0.44343645  0.48504365 0.35534763  0.21109177\n                 disease_severity\ntemperature             0.4434365\nhumidity                0.4850437\nrainfall                0.3553476\nwind_speed              0.2110918\ndisease_severity        1.0000000\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n## 3. การสร้างโมเดล Bayesian\n\n### 3.1 การกำหนด Prior\n\nการเลือก prior ที่เหมาะสมเป็นขั้นตอนสำคัญในการวิเคราะห์แบบ Bayesian:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# กำหนด prior สำหรับ regression coefficients\npriors <- c(\nprior(normal(0, 2), class = \"Intercept\"),\nprior(normal(0, 1), class = \"b\"),\nprior(student_t(3, 0, 2), class = \"sigma\")\n)\n\n# สร้างโมเดลพื้นฐาน\nmodel_disease <- brm(\ndisease_severity ~ temperature + humidity + rainfall,\ndata = rice_blast_data,\nfamily = gaussian(),\nprior = priors,\nchains = 4,\niter = 4000,\nwarmup = 1000\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 3.5e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.35 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 4000 [  0%]  (Warmup)\nChain 1: Iteration:  400 / 4000 [ 10%]  (Warmup)\nChain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)\nChain 1: Iteration: 1001 / 4000 [ 25%]  (Sampling)\nChain 1: Iteration: 1400 / 4000 [ 35%]  (Sampling)\nChain 1: Iteration: 1800 / 4000 [ 45%]  (Sampling)\nChain 1: Iteration: 2200 / 4000 [ 55%]  (Sampling)\nChain 1: Iteration: 2600 / 4000 [ 65%]  (Sampling)\nChain 1: Iteration: 3000 / 4000 [ 75%]  (Sampling)\nChain 1: Iteration: 3400 / 4000 [ 85%]  (Sampling)\nChain 1: Iteration: 3800 / 4000 [ 95%]  (Sampling)\nChain 1: Iteration: 4000 / 4000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 0.028 seconds (Warm-up)\nChain 1:                0.071 seconds (Sampling)\nChain 1:                0.099 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 7e-06 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 4000 [  0%]  (Warmup)\nChain 2: Iteration:  400 / 4000 [ 10%]  (Warmup)\nChain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)\nChain 2: Iteration: 1001 / 4000 [ 25%]  (Sampling)\nChain 2: Iteration: 1400 / 4000 [ 35%]  (Sampling)\nChain 2: Iteration: 1800 / 4000 [ 45%]  (Sampling)\nChain 2: Iteration: 2200 / 4000 [ 55%]  (Sampling)\nChain 2: Iteration: 2600 / 4000 [ 65%]  (Sampling)\nChain 2: Iteration: 3000 / 4000 [ 75%]  (Sampling)\nChain 2: Iteration: 3400 / 4000 [ 85%]  (Sampling)\nChain 2: Iteration: 3800 / 4000 [ 95%]  (Sampling)\nChain 2: Iteration: 4000 / 4000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.027 seconds (Warm-up)\nChain 2:                0.063 seconds (Sampling)\nChain 2:                0.09 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 7e-06 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 4000 [  0%]  (Warmup)\nChain 3: Iteration:  400 / 4000 [ 10%]  (Warmup)\nChain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)\nChain 3: Iteration: 1001 / 4000 [ 25%]  (Sampling)\nChain 3: Iteration: 1400 / 4000 [ 35%]  (Sampling)\nChain 3: Iteration: 1800 / 4000 [ 45%]  (Sampling)\nChain 3: Iteration: 2200 / 4000 [ 55%]  (Sampling)\nChain 3: Iteration: 2600 / 4000 [ 65%]  (Sampling)\nChain 3: Iteration: 3000 / 4000 [ 75%]  (Sampling)\nChain 3: Iteration: 3400 / 4000 [ 85%]  (Sampling)\nChain 3: Iteration: 3800 / 4000 [ 95%]  (Sampling)\nChain 3: Iteration: 4000 / 4000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.027 seconds (Warm-up)\nChain 3:                0.062 seconds (Sampling)\nChain 3:                0.089 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 8e-06 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 4000 [  0%]  (Warmup)\nChain 4: Iteration:  400 / 4000 [ 10%]  (Warmup)\nChain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)\nChain 4: Iteration: 1001 / 4000 [ 25%]  (Sampling)\nChain 4: Iteration: 1400 / 4000 [ 35%]  (Sampling)\nChain 4: Iteration: 1800 / 4000 [ 45%]  (Sampling)\nChain 4: Iteration: 2200 / 4000 [ 55%]  (Sampling)\nChain 4: Iteration: 2600 / 4000 [ 65%]  (Sampling)\nChain 4: Iteration: 3000 / 4000 [ 75%]  (Sampling)\nChain 4: Iteration: 3400 / 4000 [ 85%]  (Sampling)\nChain 4: Iteration: 3800 / 4000 [ 95%]  (Sampling)\nChain 4: Iteration: 4000 / 4000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.025 seconds (Warm-up)\nChain 4:                0.071 seconds (Sampling)\nChain 4:                0.096 seconds (Total)\nChain 4: \n```\n:::\n:::\n\n\n### 3.2 การตรวจสอบ Model Convergence\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ตรวจสอบ MCMC chains\nplot(model_disease)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Trace plots\nmcmc_trace(model_disease)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\n## 4. การวิเคราะห์ผลลัพธ์\n\n### 4.1 การแปลผลโมเดล\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# สรุปผลโมเดล\nsummary(model_disease)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: disease_severity ~ temperature + humidity + rainfall \n   Data: rice_blast_data (Number of observations: 180) \n  Draws: 4 chains, each with iter = 4000; warmup = 1000; thin = 1;\n         total post-warmup draws = 12000\n\nRegression Coefficients:\n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept     -75.94      7.15   -90.02   -61.87 1.00    13839     9487\ntemperature     1.31      0.17     0.98     1.64 1.00    13972     9348\nhumidity        0.56      0.06     0.44     0.69 1.00    14057     9062\nrainfall        0.22      0.04     0.14     0.31 1.00    13011     9232\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     6.57      0.36     5.91     7.31 1.00    13482     9350\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n\n```{.r .cell-code}\n# Posterior intervals\nposterior_interval(model_disease, prob = 0.95)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      2.5%       97.5%\nb_Intercept    -90.0159398  -61.870208\nb_temperature    0.9772238    1.637497\nb_humidity       0.4427657    0.686660\nb_rainfall       0.1396287    0.307954\nsigma            5.9118005    7.309563\nIntercept       12.2576677   14.122301\nlprior         -34.4011964  -28.266729\nlp__          -628.1997676 -622.216970\n```\n:::\n\n```{.r .cell-code}\n# Posterior predictive checks\npp_check(model_disease)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### 4.2 การเปรียบเทียบโมเดล\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# สร้างโมเดลทางเลือก\nmodel_alt <- brm(\n  disease_severity ~ temperature * humidity + rainfall,\n  data = rice_blast_data,\n  family = gaussian(),\n  prior = priors\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 3.8e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.38 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 0.201 seconds (Warm-up)\nChain 1:                0.143 seconds (Sampling)\nChain 1:                0.344 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 7e-06 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.175 seconds (Warm-up)\nChain 2:                0.097 seconds (Sampling)\nChain 2:                0.272 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 7e-06 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.12 seconds (Warm-up)\nChain 3:                0.108 seconds (Sampling)\nChain 3:                0.228 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 7e-06 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.11 seconds (Warm-up)\nChain 4:                0.096 seconds (Sampling)\nChain 4:                0.206 seconds (Total)\nChain 4: \n```\n:::\n\n```{.r .cell-code}\n# เปรียบเทียบโมเดลด้วย WAIC\nwaic(model_disease, model_alt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOutput of model 'model_disease':\n\nComputed from 12000 by 180 log-likelihood matrix.\n\n          Estimate   SE\nelpd_waic   -599.3 17.5\np_waic         8.2  3.0\nwaic        1198.6 35.1\n\n4 (2.2%) p_waic estimates greater than 0.4. We recommend trying loo instead. \n\nOutput of model 'model_alt':\n\nComputed from 4000 by 180 log-likelihood matrix.\n\n          Estimate   SE\nelpd_waic   -594.6 17.0\np_waic         8.0  2.8\nwaic        1189.2 34.1\n\n4 (2.2%) p_waic estimates greater than 0.4. We recommend trying loo instead. \n\nModel comparisons:\n              elpd_diff se_diff\nmodel_alt      0.0       0.0   \nmodel_disease -4.7       1.9   \n```\n:::\n:::\n\n\n## 5. การประยุกต์ใช้ในงานระบาดวิทยาโรคพืช\n\n### 5.1 การประเมินความเสี่ยงการระบาด\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# สร้างฟังก์ชันคำนวณความน่าจะเป็นของการระบาด\npredict_outbreak <- function(model, new_data) {\n  predictions <- posterior_predict(model, newdata = new_data)\n  prob_outbreak <- mean(predictions > threshold)\n  return(prob_outbreak)\n}\n```\n:::\n\n\n### 5.2 การพยากรณ์การแพร่ระบาด\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| temperature| humidity| rainfall|\n|-----------:|--------:|--------:|\n|    21.07249| 85.18263| 17.02681|\n|    21.24068| 85.18263| 17.02681|\n|    21.40887| 85.18263| 17.02681|\n|    21.57706| 85.18263| 17.02681|\n|    21.74525| 85.18263| 17.02681|\n|    21.91343| 85.18263| 17.02681|\n\n</div>\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 6. ข้อควรระวังและข้อเสนอแนะ\n\n1.  การเลือก prior ควรอ้างอิงจากความรู้เชิงประจักษ์หรือการศึกษาก่อนหน้า\n2.  ตรวจสอบ convergence ของ MCMC chains อย่างละเอียด\n3.  พิจารณาความเหมาะสมของการแจกแจงข้อมูล\n4.  ระวังปัญหา multicollinearity ระหว่างตัวแปรทำนาย\n\n## 7. สรุป\n\nการวิเคราะห์แบบ Bayesian ใน R เป็นเครื่องมือที่มีประสิทธิภาพสำหรับงานระบาดวิทยาโรคพืช โดยเฉพาะในสถานการณ์ที่มีความไม่แน่นอนสูงหรือข้อมูลจำกัด การเลือกใช้แพ็กเกจที่เหมาะสมและการระมัดระวังในขั้นตอนต่างๆ จะช่วยให้ได้ผลการวิเคราะห์ที่น่าเชื่อถือและนำไปใช้ประโยชน์ได้จริง\n\n## เอกสารอ้างอิง\n\n1.  Bürkner, P. C. (2017). brms: An R package for Bayesian multilevel models using Stan. Journal of Statistical Software, 80(1), 1-28.\n2.  Gelman, A., et al. (2013). Bayesian Data Analysis, Third Edition. CRC Press.\n3.  McElreath, R. (2020). Statistical Rethinking: A Bayesian Course with Examples in R and Stan. CRC Press.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}