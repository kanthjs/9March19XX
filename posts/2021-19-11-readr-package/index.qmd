---
title: "อ่านไฟล์ในอาร์ด้วย readr package"
date: "2022-19-11"
categories: [R]
draft: false
toc: true 
execute: 
  eval: true
  echo: true
  warning: true
  message: true
  
---
![](https://images.unsplash.com/photo-1457369804613-52c61a468e7d?q=80&w=2670&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)

# บทนำ

แพ็คเกจ readr สำหรับผมแล้วถือว่าเป็นแพ็คเกจเริ่นต้นที่จะใช้เพื่ออ่านไฟล์ ซึ่ง ที่จริงแล้ว base ในอาร์ ก็มีฟังชัน เช่น `read.csv()` `read.tab()` อ่านไฟล์ *.csv หรือ* .tab อยู่แล้ว แล้ว มันดีอย่างไร กลุ่มผู้พัฒนา พัฒนาแพคเกจนี้มาเพื่อ ให้อาร์อ่านไฟล์ได้อย่างรวดเร็วและเหมาะสมกับข้อมูลภาคตัดขวาง rectangular data เช่น csv tsv และ fwf ที่ออกแบบมาเพื่อแยกวิเคราะห์ข้อมูลหลายประเภท ถ้ารู้ว่ากำลังทำงานกัับไฟล์ที่มีข้อมูลจำนวนนาน หรือขนาดใหญ่ แพคเกจนี้

แพ็คเกจ readr ได้รับการพัฒนาเมื่อเร็ว ๆ นี้โดย Hadley Wickham เพื่อจัดการกับการอ่านในไฟล์แบนขนาดใหญ่ได้อย่างรวดเร็ว แพ็คเกจนี้มีการแทนที่ฟังก์ชันต่างๆ เช่น `read.table()` และ `read.csv()` ฟังก์ชันใน readr คือ `read_table()` และ `read_csv()` ฟังก์ชันเหล่านี้มักจะเร็วกว่า base R พื้นฐานมากและมีคุณสมบัติที่ดีอื่น ๆ อีก

โดยจะใช้ `read_table()` และ `read_csv()` แทน `read.table()` และ `read.csv()` ได้เลย แต่ ถ้าเมื่อพบอะไรแปลก ๆ ของข้อมูลในๆฟล์ที่ใช้งาน จะอ่านและ แจ้งเตือน ซึ่ง ดีต้องที่ สามารถแก้ไขได้ ก่อนเอาข้อมูลไปวิเคราะห์ต่อไป

ข้อดีของ `read_csv()` ที่ดีต่อใจกว่า `read.csv()` คืออ่านได้รวดกว่า แล้วก็ยังสามารถระบุ ชนิด ประเภทอของคอลัมน์ได้อย่างไม่เย้นเย้อ ได้เป็นไปได้ ก็อยากจะให้ใช้ `read_csv()` มากกว่าแบบเดิม

# readr 101

```{r title = "open readr package"}
library(readr)
```

ก่อนจะใช้ฟังก์ชัน จะต้องเปิดแพคเกจ `readr` หรือ ถ้าใครใช้ แพคเกจ `tidyverse` ก็ไม่ต้องแล้วเพราะมาชุดแล้ว

```{r}
blight_yield <- read_csv(file = "bud-blight-soybean.csv")
```

::: callout-note
`readr` แสดงประเภทคอลัมน์ที่คาดเดาว่าน่าจะเป็นอะไร ซึ่ง ค่าเริ่มต้นขณะที่เรายังไม่ระบุว่าคอลัมน์แต่ละอันเป็นประเภทอะไร ซึ่ง มีประโยชน์ ช่วยตรวจสอบว่าคอลัมน์ถูกอ่านตามคิดไว้หรือไม่ ถ้าไม่ต้องระบุ คราวๆ เราอาจจะดูก่อนว่า มันกดหนดไว้เป็นอย่างไรบ้าง โดยใช้ฟังก์ชัน `spec()` เพื่อดึงข้อมูลประเภท คอลัมน์ที่คาดการณ์ไว้ (เดา)
:::

## ระบุ ชนิดของ column

```{r}
spec(blight_yield)
```

ลองมาดูกันก่อนว่า จะมี argument อะไรบ้างที่ใช้ระบุคอลัม - The available specifications are: (with string abbreviations in brackets)

-   `col_logical()` สำหรับคอลัมตัวแปรที่เก็บค่าเป็น T, F, TRUE or FALSE.

-   `col_integer()` สำหรับคอลัมตัวแปรที่เก็บค่าเป็น integers.

-   `col_double()` สำหรับคอลัมตัวแปรที่เก็บค่าเป็น doubles.

-   `col_character()` สำหรับคอลัมตัวแปรที่เก็บค่าเป็น ตัวอักษร หรือ คำ

-   `col_factor(levels, ordered)` สำหรับคอลัมตัวแปรที่เก็บค่าเป็น factor

-   `col_date(format = "")` สำหรับคอลัมตัวแปรที่เก็บค่าเป็น date format.

-   `col_time(format = "")` สำหรับคอลัมตัวแปรที่เก็บค่าเป็น time format.

-   `col_datetime(format = "")` \[T\]: ISO8601 date times

-   `col_number()` สำหรับคอลัมตัวแปรที่เก็บค่าเป็นตัวเลข grouping_mark

-   `col_skip()` สำหรับข้าม(ไม่อ่าน)คอลัมตัวแปรนี้

-   `col_guess()` กดหนดให้เดาประเภทของตัวแปร

ก็กอปปี้มา

```         
cols(
treat = col_character(), 
time = col_double(), 
block = col_double(), 
y = col_double() 
)
```

มาใส่ต่อถ้าเลย แล้วก็แก้ ตามความต้องการ จึงได้มาเป็น

```{r}
blight_yield <- read_csv(
  file = "bud-blight-soybean.csv",
  col_types = cols(
              treat = col_factor(levels = c("PD1", "PD2", "PD3", "PD4")),
              time  = col_factor(levels = c("30", "40", "50", "60")),
              block = col_factor(levels = c("1", "2", "3", "4")),
              y     = col_double()
              )
)
```

หรือ จะสั้น ๆ แบบนี้ก็ได้ แต่ก็ไม่ค่อยดีกับประเภทที่เป็น factor ซึ่ง จะจะเรียงลำดับค่า factor ไม่ตรงกับที่เราต้องการได้ ก็ได้ แล้ว จะต้องมาแก้ไข

```{r}
#| echo: true
blight_yield <- read_csv(
  file = "bud-blight-soybean.csv",
  col_types = "fffd"
  )
```

```{r}
blight_yield |> dplyr::glimpse()
```

::: callout-note
ไฟล์ที่อ่าน โดย `read_*` จาก แพคเกจ `readr` จะเป็นข้อมูลประเภท tibble 
:::
